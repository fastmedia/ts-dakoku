// Code generated by go-bindata.
// sources:
// assets/favicon.ico
// assets/index.html
// assets/success.html
// DO NOT EDIT!

package app

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x62\x60\x60\x64\x60\x64\x10\x10\x60\x02\xd3\x1b\x18\x18\x18\xc4\x18\x18\x18\x34\x18\x18\x18\x04\x18\x18\x18\x14\x18\x20\xf2\x20\xd0\xc0\x80\x1d\xfc\xff\xff\x1f\x87\x0c\xf1\x00\x64\x04\x25\x18\x10\x00\x00\xff\xff\x7d\xe8\x67\x8d\xc6\x00\x00\x00")

func assetsFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_assetsFaviconIco,
		"assets/favicon.ico",
	)
}

func assetsFaviconIco() (*asset, error) {
	bytes, err := assetsFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/favicon.ico", size: 198, mode: os.FileMode(420), modTime: time.Unix(1591848112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xb1\x8e\xdb\x30\x0c\xdd\xef\x2b\x08\xcd\x95\x95\xa0\x1d\x8a\xc2\xce\x5a\xf4\x07\xba\xcb\x12\x63\x0b\x91\x48\x43\xa2\x2f\xce\xdf\x17\xb2\xeb\x9c\x53\x74\xb8\xc9\x34\xf9\xf8\xf8\xc8\xa7\x76\x94\x14\x2f\x6f\x00\xed\x88\xd6\xd7\x00\xa0\x4d\x28\x16\xdc\x68\x73\x41\xe9\xd4\x2c\x57\xfd\x5d\x1d\x4b\x64\x13\x76\x2a\x73\xcf\x52\x14\x38\x26\x41\x92\x4e\x11\x07\xf2\xb8\x7c\x01\xe2\x2b\xc7\xc8\xf7\xbd\x49\x82\x44\xbc\x48\xd1\xde\xde\xf8\x36\xb7\x66\x4b\x6c\xc5\x18\xe8\x06\x19\x63\xa7\x8a\x3c\x22\x96\x11\x51\x14\x8c\x19\xaf\x9d\x1a\x45\xa6\xf2\xc3\x98\x64\x17\xe7\xa9\xe9\x99\xa5\x48\xb6\x53\xfd\x71\x9c\xcc\x33\x61\xbe\x35\xa7\xe6\x64\x5c\x29\x1f\xb9\x26\x05\x6a\x5c\x29\x0a\xe4\x31\x61\xa7\x04\x17\xa9\x88\x55\x55\x6b\xf6\x7d\xdb\x9e\xfd\x03\x5c\xb4\xa5\x6c\x18\xed\x90\x04\xf3\x2e\xde\x87\xf7\xbd\xea\xf8\x1d\xb3\xae\xfb\xda\x40\x98\xc1\xeb\x6b\xc4\x05\x46\x7d\x3e\x9d\x60\xd2\x5f\x21\x2d\xda\xce\xc2\x50\xd3\xda\x71\x9c\x13\x81\x8d\x61\x20\x9d\x82\xf7\x11\xff\x72\xd6\x3b\xda\x40\x90\x39\x62\xa7\x6a\xa8\xf6\x11\x81\x2a\xf1\x3a\xe8\x09\xae\xe6\x9c\x5f\x35\x54\xf1\x81\x06\x75\x3c\xea\x78\x3e\x34\x4c\x3b\x3e\xa2\xf5\x07\x26\x80\x5f\x02\x77\xce\xb7\xf2\x81\x35\xd3\xa7\x1a\x5b\xfb\x8f\x2b\x43\x90\x71\xee\x57\x23\x68\x28\xe6\x29\xe5\xb9\x4c\x2f\x04\xbd\x90\x8e\xc3\xfa\x29\xe8\x98\xbc\xcd\x8f\x17\x5a\x80\xdf\x01\xef\xc0\x04\x3f\x57\xbe\xe3\x44\x63\x2f\xff\x93\xd9\x9a\x7a\xb3\xcd\xc6\xea\xde\xe5\xad\x35\xdb\x3b\xfe\x13\x00\x00\xff\xff\x4b\x33\x1a\x12\xcf\x02\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 719, mode: os.FileMode(420), modTime: time.Unix(1591848112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSuccessHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x41\x6e\xdb\x30\x10\xbc\xe7\x15\x0b\xf6\x5a\x8a\x36\x1c\xc4\x45\x40\xf9\x2f\x14\xb9\x0a\x09\x93\x5c\x83\x5c\x27\xf2\x07\x7a\x6a\xff\x51\xf4\xd0\x07\x14\x7d\x4e\x0b\xe4\x19\x05\x23\xcb\xb5\x2f\x3d\xe5\xc6\xdd\x1d\xcd\xcc\x8e\x56\x7b\x4e\x71\x77\x07\xa0\x3d\x1a\xd7\x1e\x00\x3a\x21\x1b\xb0\xde\x94\x8a\xdc\x8b\x23\x8f\xf2\x93\xb8\x1e\x65\x93\xb0\x17\x85\x06\xe2\x2a\xc0\x52\x66\xcc\xdc\x8b\x4c\x21\x3b\x9c\x3e\x42\xa6\x91\x62\xa4\x97\xe5\x23\x0e\x1c\x71\xf7\xfa\xfd\xeb\xeb\xb7\x5f\x7f\x7e\x7c\xf9\xfd\xf3\x33\x48\xe0\x2a\x9d\xd9\xd3\xfe\xa8\xd5\x3c\x9f\xb1\x31\xe4\x3d\x14\x8c\xbd\xa8\x7c\x8a\x58\x3d\x22\x0b\xf0\x05\xc7\x5e\x78\xe6\x43\x7d\x54\x2a\x99\xc9\xba\xdc\x0d\x44\x5c\xb9\x98\x43\x2b\x2c\x25\x35\x52\x66\x69\x5e\xb0\x52\x42\x75\xdf\x6d\xbb\x95\xb2\xb5\xde\xb4\xbb\x14\x72\x67\x6b\x15\xc0\xa7\x03\xf6\x82\x71\xe2\x06\x12\xef\x20\x7f\x69\xa8\xfb\x6e\x75\xd6\xbe\xf4\xfe\x2b\xac\xd5\x92\xbe\x1e\xc8\x9d\xc0\x46\x53\xeb\x8c\x91\x16\x33\x63\x59\xfc\xb9\xf0\xbc\x4c\x2d\x3d\x63\x91\x2d\x7d\x13\x32\x16\x70\x72\x8c\x38\x81\x97\xeb\xd5\x0a\x0e\x72\x03\x69\x92\xe6\xc8\x04\xad\x2d\x2d\xc5\x63\xca\x60\x62\x78\xca\x32\x05\xe7\x22\x9e\x39\xdb\x5f\x35\x21\x43\xa1\x88\xbd\x68\x4f\xb1\x48\x84\xdc\x88\xdf\x84\x2e\xe0\x76\x2a\xeb\x5b\x0f\xcd\x7c\xc8\x4f\x57\x10\x00\x1d\x16\xcc\x68\x60\x34\xd2\x7a\xb4\x7b\x69\x43\xb1\x11\x5b\xbd\x99\x04\xbc\x45\xdc\x48\x22\x95\xc7\x0f\xdb\x87\x61\xb3\x7d\x10\x3b\xad\xc2\x0d\xd1\x50\xae\xcb\xeb\x2b\xfa\xe7\x48\xf9\xf5\x65\x19\xd5\x56\x98\x53\x6d\x61\xee\xee\xb4\x9a\x8f\xfc\x6f\x00\x00\x00\xff\xff\xd2\x85\x54\x2b\xec\x02\x00\x00")

func assetsSuccessHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSuccessHtml,
		"assets/success.html",
	)
}

func assetsSuccessHtml() (*asset, error) {
	bytes, err := assetsSuccessHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/success.html", size: 748, mode: os.FileMode(420), modTime: time.Unix(1591848112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/favicon.ico": assetsFaviconIco,
	"assets/index.html": assetsIndexHtml,
	"assets/success.html": assetsSuccessHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{assetsFaviconIco, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"success.html": &bintree{assetsSuccessHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

